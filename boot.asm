bits 16
org 0x7c00

; На данный момент нельзя размещать строку в определенной секции, иначе почемуто процессор не может получить к этому участку памяти доступ
; Сейчас строка определена в той же секции что и код програмы.
mesage db "Hello world!", 0


section .text
global _start

_start:

    xor ax, ax ; Зануляем регист
    mov ds, ax ; Устанавливаем значение сегментного регистра DS(Data segment) сегмент данных
    mov es, ax ; Устанавливаем значение сегментного регистра ES(Extention segment) расширенный сегмент данных

    mov ah, 0x0e  ; Указываем режим работы BIOS с экраном монитора (он подерживает разные графические и текстовые режимы работы) 
    mov si, mesage ; Копируем в регистр si (source index индекс источника) адрес начала строки - метка является адресом на начало строки
    jmp print_str ; Прыгаем на указанную метку

print_str: ; Процедура вывода строки на экран средствами BIOS
    print_cur_char_in_si_if_not_zero:
        mov al, [si] ; В регист al кладем разыменованный адрес, который хранится в регистре si (текущий символ строки байт)
        cmp al, 0 ;  Если значение этого байта равно 0
        je main_loop ; Прыгаем на указанную метку
        int 0x10 ; Иначе выводим указанный символ в al
        inc si ; Инкрементив указатель в регистре si на следующий байт
        jmp print_cur_char_in_si_if_not_zero    ; Прыгаем на начало цикла для вывода на экран следующего (уже текущего) символа строки

main_loop:
    jmp main_loop   ; $ - Указатель на текущую инструкцию, данная конструкция означает вечный цикл  


times 510 - ($ - $$) db 0 ; Заполняем оставшуюся память в программе (в секторе 512 байт) 0-ми

dw 0xaa55  ; Последние 2 байта должны содержать магические числа, так BIOS определяет какой 1-й сектор является загрузочным